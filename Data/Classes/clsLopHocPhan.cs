///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'LopHocPhan'
// Generated by LLBLGen v1.3.5996.26197 Final on: Tuesday, March 12, 2019, 2:08:08 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace QLDiem_SV
{
	/// <summary>
	/// Purpose: Data Access class for the table 'LopHocPhan'.
	/// </summary>
	public class clsLopHocPhan : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlString		m_sThu, m_sMaHK, m_sMaHKOld, m_sMaGV, m_sMaGVOld, m_sMaHP, m_sMaHPOld, m_sMaLopHP;
			private SqlInt32		m_iTietKetThuc, m_iTietBatDau;
			private SqlString		m_sPhongHoc, m_sTongSoSV;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsLopHocPhan()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaLopHP</LI>
		///		 <LI>PhongHoc. May be SqlString.Null</LI>
		///		 <LI>TongSoSV. May be SqlString.Null</LI>
		///		 <LI>TietBatDau. May be SqlInt32.Null</LI>
		///		 <LI>TietKetThuc. May be SqlInt32.Null</LI>
		///		 <LI>Thu. May be SqlString.Null</LI>
		///		 <LI>MaHP. May be SqlString.Null</LI>
		///		 <LI>MaGV. May be SqlString.Null</LI>
		///		 <LI>MaHK. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaLopHP", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLopHP));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@PhongHoc", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPhongHoc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@TongSoSV", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTongSoSV));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@TietBatDau", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iTietBatDau));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@TietKetThuc", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iTietKetThuc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Thu", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sThu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaHP", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaHP));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaGV", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaGV));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaHK", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaHK));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::Insert::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaLopHP</LI>
		///		 <LI>PhongHoc. May be SqlString.Null</LI>
		///		 <LI>TongSoSV. May be SqlString.Null</LI>
		///		 <LI>TietBatDau. May be SqlInt32.Null</LI>
		///		 <LI>TietKetThuc. May be SqlInt32.Null</LI>
		///		 <LI>Thu. May be SqlString.Null</LI>
		///		 <LI>MaHP. May be SqlString.Null</LI>
		///		 <LI>MaGV. May be SqlString.Null</LI>
		///		 <LI>MaHK. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaLopHP", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLopHP));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@PhongHoc", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPhongHoc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@TongSoSV", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTongSoSV));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@TietBatDau", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iTietBatDau));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@TietKetThuc", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iTietKetThuc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Thu", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sThu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaHP", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaHP));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaGV", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaGV));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaHK", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaHK));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::Update::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'MaHP.
		/// This method will Update one or more existing rows in the database. It will reset the field 'MaHP' in
		/// all rows which have as value for this field the value as set in property 'maHPOld' to 
		/// the value as set in property 'maHP'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaHP. May be SqlString.Null</LI>
		///		 <LI>MaHPOld. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWMaHPLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_UpdateAllWMaHPLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaHP", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaHP));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaHPOld", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaHPOld));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::UpdateAllWMaHPLogic::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'MaGV.
		/// This method will Update one or more existing rows in the database. It will reset the field 'MaGV' in
		/// all rows which have as value for this field the value as set in property 'maGVOld' to 
		/// the value as set in property 'maGV'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaGV. May be SqlString.Null</LI>
		///		 <LI>MaGVOld. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWMaGVLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_UpdateAllWMaGVLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaGV", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaGV));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaGVOld", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaGVOld));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::UpdateAllWMaGVLogic::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'MaHK.
		/// This method will Update one or more existing rows in the database. It will reset the field 'MaHK' in
		/// all rows which have as value for this field the value as set in property 'maHKOld' to 
		/// the value as set in property 'maHK'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaHK. May be SqlString.Null</LI>
		///		 <LI>MaHKOld. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWMaHKLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_UpdateAllWMaHKLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaHK", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaHK));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaHKOld", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaHKOld));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::UpdateAllWMaHKLogic::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaLopHP</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaLopHP", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLopHP));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::Delete::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaLopHP</LI>
		/// </UL>
		///		 <LI>MaLopHP</LI>
		///		 <LI>PhongHoc</LI>
		///		 <LI>TongSoSV</LI>
		///		 <LI>TietBatDau</LI>
		///		 <LI>TietKetThuc</LI>
		///		 <LI>Thu</LI>
		///		 <LI>MaHP</LI>
		///		 <LI>MaGV</LI>
		///		 <LI>MaHK</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("LopHocPhan");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaLopHP", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLopHP));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				if(dtToReturn.Rows.Count > 0)
				{
					m_sMaLopHP = (string)dtToReturn.Rows[0]["MaLopHP"];
					m_sPhongHoc = dtToReturn.Rows[0]["PhongHoc"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["PhongHoc"];
					m_sTongSoSV = dtToReturn.Rows[0]["TongSoSV"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["TongSoSV"];
					m_iTietBatDau = dtToReturn.Rows[0]["TietBatDau"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["TietBatDau"];
					m_iTietKetThuc = dtToReturn.Rows[0]["TietKetThuc"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["TietKetThuc"];
					m_sThu = dtToReturn.Rows[0]["Thu"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Thu"];
					m_sMaHP = dtToReturn.Rows[0]["MaHP"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["MaHP"];
					m_sMaGV = dtToReturn.Rows[0]["MaGV"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["MaGV"];
					m_sMaHK = dtToReturn.Rows[0]["MaHK"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["MaHK"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("LopHocPhan");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'MaHP'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaHP. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWMaHPLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_SelectAllWMaHPLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("LopHocPhan");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaHP", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaHP));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::SelectAllWMaHPLogic::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'MaGV'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaGV. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWMaGVLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_SelectAllWMaGVLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("LopHocPhan");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaGV", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaGV));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::SelectAllWMaGVLogic::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'MaHK'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaHK. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWMaHKLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_LopHocPhan_SelectAllWMaHKLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("LopHocPhan");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaHK", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaHK));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLopHocPhan::SelectAllWMaHKLogic::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString MaLopHP
		{
			get
			{
				return m_sMaLopHP;
			}
			set
			{
				SqlString sMaLopHPTmp = (SqlString)value;
				if(sMaLopHPTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("maLopHP", "maLopHP can't be NULL");
				}
				m_sMaLopHP = value;
			}
		}


		public SqlString PhongHoc
		{
			get
			{
				return m_sPhongHoc;
			}
			set
			{
				m_sPhongHoc = value;
			}
		}


		public SqlString TongSoSV
		{
			get
			{
				return m_sTongSoSV;
			}
			set
			{
				m_sTongSoSV = value;
			}
		}


		public SqlInt32 TietBatDau
		{
			get
			{
				return m_iTietBatDau;
			}
			set
			{
				m_iTietBatDau = value;
			}
		}


		public SqlInt32 TietKetThuc
		{
			get
			{
				return m_iTietKetThuc;
			}
			set
			{
				m_iTietKetThuc = value;
			}
		}


		public SqlString Thu
		{
			get
			{
				return m_sThu;
			}
			set
			{
				m_sThu = value;
			}
		}


		public SqlString MaHP
		{
			get
			{
				return m_sMaHP;
			}
			set
			{
				m_sMaHP = value;
			}
		}
		public SqlString maHPOld
		{
			get
			{
				return m_sMaHPOld;
			}
			set
			{
				m_sMaHPOld = value;
			}
		}


		public SqlString MaGV
		{
			get
			{
				return m_sMaGV;
			}
			set
			{
				m_sMaGV = value;
			}
		}
		public SqlString maGVOld
		{
			get
			{
				return m_sMaGVOld;
			}
			set
			{
				m_sMaGVOld = value;
			}
		}


		public SqlString MaHK
		{
			get
			{
				return m_sMaHK;
			}
			set
			{
				m_sMaHK = value;
			}
		}
		public SqlString maHKOld
		{
			get
			{
				return m_sMaHKOld;
			}
			set
			{
				m_sMaHKOld = value;
			}
		}
		#endregion
	}
}
