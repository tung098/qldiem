///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'SinhVien'
// Generated by LLBLGen v1.3.5996.26197 Final on: Tuesday, March 12, 2019, 2:08:08 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace QLDiem_SV
{
	/// <summary>
	/// Purpose: Data Access class for the table 'SinhVien'.
	/// </summary>
	public class clsSinhVien : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlString		m_sMaLop, m_sMaLopOld, m_sMaSV;
			private SqlDateTime		m_daNgaySinh;
			private SqlDouble		m_fDiemTichLuy;
			private SqlInt32		m_iSoTinChiDaDat, m_iSoTinChiDaDKi;
			private SqlString		m_sHoTen, m_sQueQuan, m_sDiaChiHT, m_sGioiTinh;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsSinhVien()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaSV</LI>
		///		 <LI>HoTen. May be SqlString.Null</LI>
		///		 <LI>NgaySinh. May be SqlDateTime.Null</LI>
		///		 <LI>GioiTinh. May be SqlString.Null</LI>
		///		 <LI>QueQuan. May be SqlString.Null</LI>
		///		 <LI>DiaChiHT. May be SqlString.Null</LI>
		///		 <LI>MaLop. May be SqlString.Null</LI>
		///		 <LI>SoTinChiDaDat. May be SqlInt32.Null</LI>
		///		 <LI>DiemTichLuy. May be SqlDouble.Null</LI>
		///		 <LI>SoTinChiDaDKi. May be SqlInt32.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SinhVien_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaSV", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaSV));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@HoTen", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sHoTen));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@NgaySinh", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgaySinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@GioiTinh", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sGioiTinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@QueQuan", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sQueQuan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@DiaChiHT", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDiaChiHT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaLop", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLop));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@SoTCDaDat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSoTinChiDaDat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@DiemTichLuy", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fDiemTichLuy));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@SoTCDaDKy", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSoTinChiDaDKi));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSinhVien::Insert::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaSV</LI>
		///		 <LI>HoTen. May be SqlString.Null</LI>
		///		 <LI>NgaySinh. May be SqlDateTime.Null</LI>
		///		 <LI>GioiTinh. May be SqlString.Null</LI>
		///		 <LI>QueQuan. May be SqlString.Null</LI>
		///		 <LI>DiaChiHT. May be SqlString.Null</LI>
		///		 <LI>MaLop. May be SqlString.Null</LI>
		///		 <LI>SoTinChiDaDat. May be SqlInt32.Null</LI>
		///		 <LI>DiemTichLuy. May be SqlDouble.Null</LI>
		///		 <LI>SoTinChiDaDKi. May be SqlInt32.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SinhVien_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaSV", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaSV));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@HoTen", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sHoTen));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@NgaySinh", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgaySinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@GioiTinh", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sGioiTinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@QueQuan", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sQueQuan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@DiaChiHT", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDiaChiHT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaLop", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLop));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@SoTCDaDat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSoTinChiDaDat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@DiemTichLuy", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fDiemTichLuy));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@SoTCDaDKy", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSoTinChiDaDKi));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSinhVien::Update::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'MaLop.
		/// This method will Update one or more existing rows in the database. It will reset the field 'MaLop' in
		/// all rows which have as value for this field the value as set in property 'maLopOld' to 
		/// the value as set in property 'maLop'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaLop. May be SqlString.Null</LI>
		///		 <LI>MaLopOld. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWMaLopLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SinhVien_UpdateAllWMaLopLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaLop", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLop));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaLopOld", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLopOld));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSinhVien::UpdateAllWMaLopLogic::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaSV</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SinhVien_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaSV", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaSV));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSinhVien::Delete::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MaSV</LI>
		/// </UL>
		///		 <LI>MaSV</LI>
		///		 <LI>HoTen</LI>
		///		 <LI>NgaySinh</LI>
		///		 <LI>GioiTinh</LI>
		///		 <LI>QueQuan</LI>
		///		 <LI>DiaChiHT</LI>
		///		 <LI>MaLop</LI>
		///		 <LI>SoTinChiDaDat</LI>
		///		 <LI>DiemTichLuy</LI>
		///		 <LI>SoTinChiDaDKi</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SinhVien_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("SinhVien");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaSV", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaSV));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				if(dtToReturn.Rows.Count > 0)
				{
					m_sMaSV = (string)dtToReturn.Rows[0]["MaSV"];
					m_sHoTen = dtToReturn.Rows[0]["HoTen"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["HoTen"];
					m_daNgaySinh = dtToReturn.Rows[0]["NgaySinh"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["NgaySinh"];
					m_sGioiTinh = dtToReturn.Rows[0]["GioiTinh"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["GioiTinh"];
					m_sQueQuan = dtToReturn.Rows[0]["QueQuan"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["QueQuan"];
					m_sDiaChiHT = dtToReturn.Rows[0]["DiaChiHT"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["DiaChiHT"];
					m_sMaLop = dtToReturn.Rows[0]["MaLop"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["MaLop"];
					m_iSoTinChiDaDat = dtToReturn.Rows[0]["SoTinChiDaDat"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["SoTinChiDaDat"];
					m_fDiemTichLuy = dtToReturn.Rows[0]["DiemTichLuy"] == System.DBNull.Value ? SqlDouble.Null : (double)dtToReturn.Rows[0]["DiemTichLuy"];
					m_iSoTinChiDaDKi = dtToReturn.Rows[0]["SoTinChiDaDKi"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["SoTinChiDaDKi"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSinhVien::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SinhVien_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("SinhVien");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSinhVien::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}



        public  DataTable SelectAllSV_Lop(string MaLop)
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_SinhVien_SelectAll_Lop]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("SinhVien");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@MaLop", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, MaLop));
                if (m_bMainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    m_scoMainConnection.Open();
                }
                else
                {
                    if (m_cpMainConnectionProvider.IsTransactionPending)
                    {
                        scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                return dtToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("clsSinhVien::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (m_bMainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    m_scoMainConnection.Close();
                }
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }


        public DataTable SelectAllSV_Khoa(string MaKhoa)
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_SinhVien_SelectAll_Khoa]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("SinhVien");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@MaKhoa", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, MaKhoa));
                if (m_bMainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    m_scoMainConnection.Open();
                }
                else
                {
                    if (m_cpMainConnectionProvider.IsTransactionPending)
                    {
                        scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                return dtToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("clsSinhVien::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (m_bMainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    m_scoMainConnection.Close();
                }
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }
        /// <summary>
        /// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'MaLop'
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>MaLop. May be SqlString.Null</LI>
        /// </UL>
        /// </remarks>
        public DataTable SelectAllWMaLopLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SinhVien_SelectAllWMaLopLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("SinhVien");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@MaLop", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLop));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSinhVien::SelectAllWMaLopLogic::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString MaSV
		{
			get
			{
				return m_sMaSV;
			}
			set
			{
				SqlString sMaSVTmp = (SqlString)value;
				if(sMaSVTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("maSV", "maSV can't be NULL");
				}
				m_sMaSV = value;
			}
		}


		public SqlString HoTen
		{
			get
			{
				return m_sHoTen;
			}
			set
			{
				m_sHoTen = value;
			}
		}


		public SqlDateTime NgaySinh
		{
			get
			{
				return m_daNgaySinh;
			}
			set
			{
				m_daNgaySinh = value;
			}
		}


		public SqlString GioiTinh
		{
			get
			{
				return m_sGioiTinh;
			}
			set
			{
				m_sGioiTinh = value;
			}
		}


		public SqlString QueQuan
		{
			get
			{
				return m_sQueQuan;
			}
			set
			{
				m_sQueQuan = value;
			}
		}


		public SqlString DiaChiHT
		{
			get
			{
				return m_sDiaChiHT;
			}
			set
			{
				m_sDiaChiHT = value;
			}
		}


		public SqlString MaLop
		{
			get
			{
				return m_sMaLop;
			}
			set
			{
				m_sMaLop = value;
			}
		}
		public SqlString maLopOld
		{
			get
			{
				return m_sMaLopOld;
			}
			set
			{
				m_sMaLopOld = value;
			}
		}


		public SqlInt32 SoTinChiDaDat
		{
			get
			{
				return m_iSoTinChiDaDat;
			}
			set
			{
				m_iSoTinChiDaDat = value;
			}
		}


		public SqlDouble DiemTichLuy
		{
			get
			{
				return m_fDiemTichLuy;
			}
			set
			{
				m_fDiemTichLuy = value;
			}
		}


		public SqlInt32 SoTinChiDaDKi
		{
			get
			{
				return m_iSoTinChiDaDKi;
			}
			set
			{
				m_iSoTinChiDaDKi = value;
			}
		}
		#endregion
	}
}
